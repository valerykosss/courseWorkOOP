using CLINICS.models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace CLINICS.adminpages
{
    /// <summary>
    /// Interaction logic for DoctorServiceTable.xaml
    /// </summary>
    public partial class DoctorServiceTable : Page
    {
        private DOCTOR_SERVICE _currentDoctorService = new DOCTOR_SERVICE();
        public DoctorServiceTable()
        {
            InitializeComponent();
            Load();
            DataContext = _currentDoctorService;
        }
        private void Load()
        {
            DoctorServiceDataGrid.ItemsSource = CLINICSEntities.GetContext().DOCTOR_SERVICE.ToList();
        }

        private void ClearTextBox() {}

        private void add_Click(object sender, RoutedEventArgs e)
        {
            StringBuilder emptyDataErrors = new StringBuilder();

            if (DoctorIDCombobox.SelectedItem == null)
            {
                emptyDataErrors.AppendLine("Вы не выбрали фамилию врача");
            }
            if (ClientIDCombobox.SelectedItem == null)
            {
                emptyDataErrors.AppendLine("Вы не выбрали телефон клиента");
            }

            if (emptyDataErrors.Length > 0)
            {
                MessageBox.Show(emptyDataErrors.ToString());
                return;
            }
            string doctorName = DoctorName.Text.Trim();
            string doctorSurname = DoctorSurname.Text.Trim();
            string doctorPatronymic = DoctorPatronymic.Text.Trim();

            Regex r = new Regex(@"^[А-Я][а-я]+$");
            Match m1 = r.Match(doctorName);
            Match m2 = r.Match(doctorSurname);
            Match m3 = r.Match(doctorPatronymic);

            StringBuilder regexDataErrors = new StringBuilder();
            int flag1 = 1;
            if (!m1.Success)
            {
                flag1 = 0;
                regexDataErrors.AppendLine("Введите корректое имя");
            }

            int flag2 = 1;
            if (!m2.Success)
            {
                flag2 = 0;
                regexDataErrors.AppendLine("Введите корректную фамилию");
            }

            int flag3 = 1;
            if (!m3.Success)
            {
                flag3 = 0;
                regexDataErrors.AppendLine("Введите корректное отчество");
            }

            int flag4 = 1;
            if (!m3.Success)
            {
                flag3 = 0;
                regexDataErrors.AppendLine("Введите корректное отчество");
            }

            if (regexDataErrors.Length > 0)
            {
                MessageBox.Show(regexDataErrors.ToString());
                return;
            }

            //ТУТ РЕДЖЕКСЫ НА ВАЛМДНОСТЬ ИМЕН
            if (flag1 == 1 && flag1 == 2 && flag3 == 1)
            {
                DOCTOR _currentDoctor = new DOCTOR();
                _currentDoctor.DoctorName = DoctorName.Text;
                _currentDoctor.DoctorSurname = DoctorSurname.Text;
                _currentDoctor.DoctorPatronymic = DoctorPatronymic.Text;

                CLINICSEntities.GetContext().DOCTORS.Add(_currentDoctor);
                try
                {
                    CLINICSEntities.GetContext().SaveChanges();
                    MessageBox.Show("Успешно!");
                    Load();
                    ClearTextBox();
                }
                catch (DbEntityValidationException ex)
                {
                    //MessageBox.Show(ex.Message);
                    foreach (DbEntityValidationResult validationError in ex.EntityValidationErrors)
                    {
                        MessageBox.Show("Object: " + validationError.Entry.Entity.ToString());
                        MessageBox.Show(" ");

                        foreach (DbValidationError err in validationError.ValidationErrors)
                        {
                            MessageBox.Show(err.ErrorMessage + " ");

                        }
                    }
                }
            }
        }

        private void delete_Click(object sender, RoutedEventArgs e)
        {
            var elementsToRemove = DoctorDataGrid.SelectedItems.Cast<DOCTOR>().ToList();
            if (MessageBox.Show($"Вы точно хотите удалить {elementsToRemove.Count()} элемент(ов)?", "Внимание",
                MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                try
                {
                    CLINICSEntities.GetContext().DOCTORS.RemoveRange(elementsToRemove);
                    CLINICSEntities.GetContext().SaveChanges();
                    MessageBox.Show("Данные удалены");
                    Load();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message.ToString());
                }
        }

        private void edit_Click(object sender, RoutedEventArgs e)
        {
            DOCTOR sel = DoctorDataGrid.SelectedItem as DOCTOR;

            _currentDoctor = sel;

            DoctorName.Text = _currentDoctor.DoctorName;
            DoctorSurname.Text = _currentDoctor.DoctorSurname;
            DoctorPatronymic.Text = _currentDoctor.DoctorPatronymic;
        }

        private void save_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _currentDoctor.DoctorName = DoctorName.Text;
                _currentDoctor.DoctorSurname = DoctorSurname.Text;
                _currentDoctor.DoctorPatronymic = DoctorPatronymic.Text;

                CLINICSEntities.GetContext().Entry(_currentDoctor).State = System.Data.Entity.EntityState.Modified;

                CLINICSEntities.GetContext().SaveChanges();
                MessageBox.Show("Изменения внесены");
                Load();
                ClearTextBox();
            }
            catch (DbEntityValidationException ex)
            {
                //MessageBox.Show(ex.Message);
                foreach (DbEntityValidationResult validationError in ex.EntityValidationErrors)
                {
                    MessageBox.Show("Object: " + validationError.Entry.Entity.ToString());
                    MessageBox.Show(" ");

                    foreach (DbValidationError err in validationError.ValidationErrors)
                    {
                        MessageBox.Show(err.ErrorMessage + " ");

                    }
                }
            }
        }

        private void DoctorDataGrid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            DOCTOR selectedDoctor = new DOCTOR();
            selectedDoctor = DoctorDataGrid.SelectedItem as DOCTOR;
            if (selectedDoctor != null)
            {
                string link = selectedDoctor.DoctorImage;
                BitmapImage myBitmapImage = new BitmapImage(new Uri(link));
                myBitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                DocImage.Source = myBitmapImage;
            }
            else
            {
                MessageBox.Show("Не выбрана запись, чтобы отобразить фото");
            }
        }
    }
}
